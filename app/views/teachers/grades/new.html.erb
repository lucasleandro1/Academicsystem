<%# Page Title %>
<% content_for :title, "Lançar Nota - Professor" %>

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
  <h1 class="h2">
    <i class="fas fa-clipboard-check text-success me-2"></i>
    Lançar Nota
  </h1>
  <div class="btn-toolbar mb-2 mb-md-0">
    <%= link_to teachers_grades_path, class: "btn btn-sm btn-outline-secondary" do %>
      <i class="fas fa-arrow-left"></i> Voltar
    <% end %>
  </div>
</div>

<div class="row">
  <div class="col-md-8">
    <div class="card">
      <div class="card-body">
        <%= form_with model: [@grade], url: teachers_grades_path, local: true, class: "needs-validation", novalidate: true do |form| %>
          <%= hidden_field_tag :form_token, "#{Time.current.to_i}_#{SecureRandom.hex(8)}" %>
          
          <% if @grade.errors.any? %>
            <div class="alert alert-danger">
              <h6><%= pluralize(@grade.errors.count, "erro") %> impedem que a nota seja salva:</h6>
              <ul class="mb-0">
                <% @grade.errors.full_messages.each do |message| %>
                  <li><%= message %></li>
                <% end %>
              </ul>
            </div>
          <% end %>

          <div class="row">
            <div class="col-md-4 mb-3">
              <%= form.label :subject_name, "Disciplina", class: "form-label" %>
              <%= form.select :subject_name, 
                  options_for_select(@subjects_grouped.map { |s| [s.name, s.name] }, @selected_subject_name), 
                  { prompt: "Selecione uma disciplina" }, 
                  { class: "form-select", required: true, id: "subject_select" } %>
              <div class="invalid-feedback">
                Por favor, selecione uma disciplina.
              </div>
            </div>

            <div class="col-md-4 mb-3">
              <%= form.label :classroom_id, "Turma", class: "form-label" %>
              <%= form.select :classroom_id, 
                  @classrooms.any? ? options_from_collection_for_select(@classrooms, :id, :name, @selected_classroom_id) : "",
                  { prompt: @selected_subject_name ? "Selecione a turma" : "Primeiro selecione uma disciplina" }, 
                  { class: "form-select", required: true, id: "classroom_select", disabled: @classrooms.empty? } %>
              <div class="invalid-feedback">
                Por favor, selecione uma turma.
              </div>
            </div>

            <div class="col-md-4 mb-3">
              <%= form.label :user_id, "Aluno", class: "form-label" %>
              <%= form.select :user_id, 
                  @students.any? ? options_from_collection_for_select(@students, :id, :full_name, @selected_user_id || @grade.user_id) : "",
                  { prompt: @selected_classroom ? "Selecione um aluno" : "Primeiro selecione disciplina e turma" }, 
                  { class: "form-select", required: true, id: "student_select", disabled: @students.empty? } %>
              <div class="invalid-feedback">
                Por favor, selecione um aluno.
              </div>
            </div>
          </div>

          <div class="row">
            <div class="col-md-4 mb-3">
              <%= form.label :bimester, "Bimestre", class: "form-label" %>
              <%= form.select :bimester, 
                  options_for_select([[1, 1], [2, 2], [3, 3], [4, 4]], @grade.bimester), 
                  { prompt: "Selecione o bimestre" }, 
                  { class: "form-select", required: true } %>
              <div class="invalid-feedback">
                Por favor, selecione o bimestre.
              </div>
            </div>

            <div class="col-md-4 mb-3">
              <%= form.label :grade_type, "Tipo de Avaliação", class: "form-label" %>
              <%= form.select :grade_type, 
                  options_for_select([
                    ["Prova", "prova"], 
                    ["Trabalho", "trabalho"], 
                    ["Atividade", "atividade"],
                    ["Participação", "participacao"],
                    ["Projeto", "projeto"]
                  ], @grade.grade_type), 
                  { prompt: "Selecione o tipo" }, 
                  { class: "form-select", required: true } %>
              <div class="invalid-feedback">
                Por favor, selecione o tipo de avaliação.
              </div>
            </div>

            <div class="col-md-4 mb-3">
              <%= form.label :value, "Nota", class: "form-label" %>
              <%= form.number_field :value, step: 0.1, min: 0, max: 10, class: "form-control", required: true %>
              <div class="invalid-feedback">
                Por favor, informe a nota (0 a 10).
              </div>
              <div class="form-text">
                Nota obtida pelo aluno
              </div>
            </div>
          </div>

          <div class="row">
            <div class="col-md-4 mb-3">
              <%= form.label :max_value, "Nota Máxima", class: "form-label" %>
              <%= form.number_field :max_value, step: 0.1, min: 0, max: 10, value: @grade.max_value || 10, class: "form-control", required: true %>
              <div class="invalid-feedback">
                Por favor, informe a nota máxima (0 a 10).
              </div>
              <div class="form-text">
                Valor máximo da avaliação (padrão: 10)
              </div>
            </div>

            <div class="col-md-4 mb-3">
              <%= form.label :assessment_name, "Nome da Avaliação", class: "form-label" %>
              <%= form.text_field :assessment_name, class: "form-control", required: true, placeholder: "Ex: P1, Trabalho 1, etc." %>
              <div class="invalid-feedback">
                Por favor, informe o nome da avaliação.
              </div>
              <div class="form-text">
                Identificação da avaliação
              </div>
            </div>

            <div class="col-md-4 mb-3">
              <%= form.label :assessment_date, "Data da Avaliação", class: "form-label" %>
              <%= form.date_field :assessment_date, value: @grade.assessment_date || Date.current, class: "form-control", required: true %>
              <div class="invalid-feedback">
                Por favor, informe a data da avaliação.
              </div>
              <div class="form-text">
                Data em que a avaliação foi aplicada
              </div>
            </div>
          </div>

          <div class="d-grid gap-2 d-md-flex justify-content-md-end">
            <%= link_to teachers_grades_path, class: "btn btn-outline-secondary me-2" do %>
              <i class="fas fa-times"></i> Cancelar
            <% end %>
            <%= form.submit "Lançar Nota", class: "btn btn-success" %>
          </div>
        <% end %>
      </div>
    </div>
  </div>

  <div class="col-md-4">
    <div class="card">
      <div class="card-header">
        <i class="fas fa-info-circle text-info"></i>
        Informações
      </div>
      <div class="card-body">
        <h6>Tipos de Avaliação:</h6>
        <ul class="list-unstyled mb-3">
          <li><strong>Prova:</strong> Avaliação escrita</li>
          <li><strong>Trabalho:</strong> Trabalho de pesquisa</li>
          <li><strong>Atividade:</strong> Exercício em classe</li>
          <li><strong>Participação:</strong> Participação em aula</li>
          <li><strong>Projeto:</strong> Projeto de longo prazo</li>
        </ul>
        
        <h6>Observações:</h6>
        <ul class="list-unstyled mb-0">
          <li>• Notas de 0 a 10</li>
          <li>• Use vírgula para decimais</li>
          <li>• Selecione primeiro a disciplina</li>
          <li>• Defina o nome da avaliação</li>
          <li>• Informe a nota máxima possível</li>
          <li>• Data padrão é hoje</li>
        </ul>
      </div>
    </div>
  </div>
</div>

<script>
  // Bootstrap form validation
  (function() {
    'use strict';
    window.addEventListener('load', function() {
      var forms = document.getElementsByClassName('needs-validation');
      var validation = Array.prototype.filter.call(forms, function(form) {
        var isSubmitting = false;
        
        form.addEventListener('submit', function(event) {
          // Prevenir múltiplas submissões
          if (isSubmitting) {
            event.preventDefault();
            return false;
          }
          
          if (form.checkValidity() === false) {
            event.preventDefault();
            event.stopPropagation();
          } else {
            isSubmitting = true;
            // Desabilitar o botão de submit
            var submitButton = form.querySelector('input[type="submit"]');
            if (submitButton) {
              submitButton.disabled = true;
              submitButton.value = 'Salvando...';
            }
          }
          form.classList.add('was-validated');
        }, false);
      });
    }, false);
  })();

  // Atualizar formulário dinamicamente com AJAX
  document.addEventListener('DOMContentLoaded', function() {
    const subjectSelect = document.getElementById('subject_select');
    const classroomSelect = document.getElementById('classroom_select');
    const studentSelect = document.getElementById('student_select');
    
    if (subjectSelect && classroomSelect && studentSelect) {
      
      // Função para carregar turmas
      function loadClassrooms(subjectName, preserveSelection = false) {
        if (!subjectName) {
          classroomSelect.innerHTML = '<option value="">Selecione uma disciplina primeiro</option>';
          classroomSelect.disabled = true;
          studentSelect.innerHTML = '<option value="">Primeiro selecione disciplina e turma</option>';
          studentSelect.disabled = true;
          return;
        }

        const currentValue = preserveSelection ? classroomSelect.value : '';
        classroomSelect.innerHTML = '<option value="">Carregando...</option>';
        classroomSelect.disabled = true;
        studentSelect.innerHTML = '<option value="">Selecione uma turma primeiro</option>';
        studentSelect.disabled = true;
        
        fetch(`/teachers/grades/get_classrooms?subject_name=${encodeURIComponent(subjectName)}`, {
          headers: {
            'Accept': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
          }
        })
        .then(response => response.json())
        .then(data => {
          classroomSelect.innerHTML = '<option value="">Selecione a turma</option>';
          
          data.classrooms.forEach(classroom => {
            const option = document.createElement('option');
            option.value = classroom.id;
            option.textContent = classroom.name;
            if (currentValue && classroom.id.toString() === currentValue) {
              option.selected = true;
            }
            classroomSelect.appendChild(option);
          });
          
          classroomSelect.disabled = false;
          
          // Se havia uma turma selecionada, carregar alunos automaticamente
          if (currentValue && classroomSelect.value) {
            loadStudents(subjectName, classroomSelect.value, true);
          }
        })
        .catch(error => {
          console.error('Erro ao carregar turmas:', error);
          classroomSelect.innerHTML = '<option value="">Erro ao carregar turmas</option>';
          classroomSelect.disabled = false;
        });
      }
      
      // Função para carregar alunos
      function loadStudents(subjectName, classroomId, preserveSelection = false) {
        if (!classroomId || !subjectName) {
          studentSelect.innerHTML = '<option value="">Selecione uma turma primeiro</option>';
          studentSelect.disabled = true;
          return;
        }

        const currentValue = preserveSelection ? studentSelect.value : '';
        studentSelect.innerHTML = '<option value="">Carregando...</option>';
        studentSelect.disabled = true;
        
        fetch(`/teachers/grades/get_students?subject_name=${encodeURIComponent(subjectName)}&classroom_id=${classroomId}`, {
          headers: {
            'Accept': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
          }
        })
        .then(response => response.json())
        .then(data => {
          studentSelect.innerHTML = '<option value="">Selecione o aluno</option>';
          
          data.students.forEach(student => {
            const option = document.createElement('option');
            option.value = student.id;
            option.textContent = student.name;
            if (currentValue && student.id.toString() === currentValue) {
              option.selected = true;
            }
            studentSelect.appendChild(option);
          });
          
          studentSelect.disabled = false;
        })
        .catch(error => {
          console.error('Erro ao carregar alunos:', error);
          studentSelect.innerHTML = '<option value="">Erro ao carregar alunos</option>';
          studentSelect.disabled = false;
        });
      }
      
      // Event listeners
      subjectSelect.addEventListener('change', function() {
        loadClassrooms(this.value, false);
      });
      
      classroomSelect.addEventListener('change', function() {
        loadStudents(subjectSelect.value, this.value, false);
      });
      
      // Inicialização: se há disciplina selecionada e turmas não estão carregadas via AJAX
      if (subjectSelect.value && classroomSelect.options.length <= 1) {
        loadClassrooms(subjectSelect.value, true);
      }
      // Se disciplina e turma estão selecionadas, mas alunos não estão carregados
      else if (subjectSelect.value && classroomSelect.value && studentSelect.options.length <= 1) {
        loadStudents(subjectSelect.value, classroomSelect.value, true);
      }
    }
  });
</script>
