<% content_for :title, "Agenda Escolar" %>

<div class="d-flex justify-content-between align-items-center mb-4">
  <h1><i class="fas fa-calendar-alt"></i> Agenda Escolar</h1>
  <div class="btn-group" role="group">
    <button type="button" class="btn btn-outline-primary active" onclick="changeView('month')">
      <i class="fas fa-calendar"></i> Mês
    </button>
    <button type="button" class="btn btn-outline-primary" onclick="changeView('week')">
      <i class="fas fa-calendar-week"></i> Semana
    </button>
    <button type="button" class="btn btn-outline-primary" onclick="changeView('list')">
      <i class="fas fa-list"></i> Lista
    </button>
  </div>
</div>

<!-- Navegação do Calendário -->
<div class="card mb-4">
  <div class="card-body">
    <div class="d-flex justify-content-between align-items-center">
      <div>
        <button class="btn btn-outline-secondary" onclick="navigateCalendar('prev')">
          <i class="fas fa-chevron-left"></i>
        </button>
        <button class="btn btn-outline-secondary ms-2" onclick="navigateCalendar('today')">
          Hoje
        </button>
        <button class="btn btn-outline-secondary ms-2" onclick="navigateCalendar('next')">
          <i class="fas fa-chevron-right"></i>
        </button>
      </div>
      <h4 class="mb-0" id="calendar-title"><%= Date.current.strftime("%B %Y").upcase %></h4>
      <div class="d-flex align-items-center">
        <div class="form-check form-switch me-3">
          <input class="form-check-input" type="checkbox" id="showPastEvents" checked>
          <label class="form-check-label" for="showPastEvents">
            Eventos passados
          </label>
        </div>
        <select class="form-select form-select-sm" id="eventTypeFilter">
          <option value="">Todos os tipos</option>
          <option value="academic">Acadêmico</option>
          <option value="cultural">Cultural</option>
          <option value="sports">Esportivo</option>
          <option value="meeting">Reunião</option>
          <option value="holiday">Feriado</option>
        </select>
      </div>
    </div>
  </div>
</div>

<!-- Vista Mensal -->
<div id="month-view" class="calendar-view">
  <div class="card">
    <div class="card-body p-0">
      <div class="calendar-grid">
        <!-- Cabeçalho dos dias da semana -->
        <div class="calendar-header">
          <div class="calendar-day-header">Dom</div>
          <div class="calendar-day-header">Seg</div>
          <div class="calendar-day-header">Ter</div>
          <div class="calendar-day-header">Qua</div>
          <div class="calendar-day-header">Qui</div>
          <div class="calendar-day-header">Sex</div>
          <div class="calendar-day-header">Sáb</div>
        </div>
        
        <!-- Grade do calendário -->
        <div class="calendar-body" id="calendar-grid">
          <!-- Os dias serão preenchidos via JavaScript -->
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Vista Semanal -->
<div id="week-view" class="calendar-view d-none">
  <div class="card">
    <div class="card-body p-0">
      <div class="table-responsive">
        <table class="table table-bordered mb-0">
          <thead>
            <tr>
              <th width="100">Hora</th>
              <th>Dom</th>
              <th>Seg</th>
              <th>Ter</th>
              <th>Qua</th>
              <th>Qui</th>
              <th>Sex</th>
              <th>Sáb</th>
            </tr>
          </thead>
          <tbody id="week-grid">
            <!-- Horários serão preenchidos via JavaScript -->
          </tbody>
        </table>
      </div>
    </div>
  </div>
</div>

<!-- Vista em Lista -->
<div id="list-view" class="calendar-view d-none">
  <div class="row" id="events-list">
    <!-- Eventos serão preenchidos via JavaScript -->
  </div>
</div>

<!-- Modal de Detalhes do Evento -->
<div class="modal fade" id="eventModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="eventModalTitle">Detalhes do Evento</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body" id="eventModalBody">
        <!-- Conteúdo do evento será preenchido via JavaScript -->
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
        <button type="button" class="btn btn-primary" id="addToCalendarBtn">
          <i class="fas fa-calendar-plus"></i> Adicionar ao Calendário
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Legenda -->
<div class="card mt-4">
  <div class="card-header">
    <h6 class="mb-0"><i class="fas fa-info-circle"></i> Legenda</h6>
  </div>
  <div class="card-body">
    <div class="row">
      <div class="col-md-6">
        <div class="d-flex align-items-center mb-2">
          <span class="badge bg-primary me-2">●</span>
          <span>Eventos Acadêmicos</span>
        </div>
        <div class="d-flex align-items-center mb-2">
          <span class="badge bg-success me-2">●</span>
          <span>Eventos Culturais</span>
        </div>
        <div class="d-flex align-items-center mb-2">
          <span class="badge bg-warning me-2">●</span>
          <span>Eventos Esportivos</span>
        </div>
      </div>
      <div class="col-md-6">
        <div class="d-flex align-items-center mb-2">
          <span class="badge bg-info me-2">●</span>
          <span>Reuniões</span>
        </div>
        <div class="d-flex align-items-center mb-2">
          <span class="badge bg-danger me-2">●</span>
          <span>Feriados</span>
        </div>
        <div class="d-flex align-items-center mb-2">
          <span class="badge bg-secondary me-2">●</span>
          <span>Outros</span>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
// Dados dos eventos (normalmente viriam do servidor)
const events = [
  <% @events.each_with_index do |event, index| %>
    {
      id: <%= event.id %>,
      title: '<%= j event.title %>',
      description: '<%= j event.description %>',
      start_date: '<%= event.start_date %>',
      end_date: '<%= event.end_date %>',
      start_time: '<%= event.start_time&.strftime("%H:%M") %>',
      end_time: '<%= event.end_time&.strftime("%H:%M") %>',
      event_type: '<%= event.event_type %>',
      location: '<%= j event.location %>',
      created_by: '<%= j (event.created_by || "Administração") %>'
    }<%= ',' unless index == @events.length - 1 %>
  <% end %>
];

let currentDate = new Date();
let currentView = 'month';

// Inicialização
document.addEventListener('DOMContentLoaded', function() {
  renderCalendar();
  
  // Event listeners
  document.getElementById('showPastEvents').addEventListener('change', renderCalendar);
  document.getElementById('eventTypeFilter').addEventListener('change', renderCalendar);
});

function changeView(view) {
  // Atualizar botões ativos
  document.querySelectorAll('.btn-group .btn').forEach(btn => {
    btn.classList.remove('active');
  });
  event.target.classList.add('active');
  
  // Esconder todas as vistas
  document.querySelectorAll('.calendar-view').forEach(view => {
    view.classList.add('d-none');
  });
  
  // Mostrar vista selecionada
  currentView = view;
  document.getElementById(view + '-view').classList.remove('d-none');
  
  renderCalendar();
}

function navigateCalendar(direction) {
  if (direction === 'prev') {
    if (currentView === 'month') {
      currentDate.setMonth(currentDate.getMonth() - 1);
    } else if (currentView === 'week') {
      currentDate.setDate(currentDate.getDate() - 7);
    }
  } else if (direction === 'next') {
    if (currentView === 'month') {
      currentDate.setMonth(currentDate.getMonth() + 1);
    } else if (currentView === 'week') {
      currentDate.setDate(currentDate.getDate() + 7);
    }
  } else if (direction === 'today') {
    currentDate = new Date();
  }
  
  renderCalendar();
}

function renderCalendar() {
  updateCalendarTitle();
  
  if (currentView === 'month') {
    renderMonthView();
  } else if (currentView === 'week') {
    renderWeekView();
  } else if (currentView === 'list') {
    renderListView();
  }
}

function updateCalendarTitle() {
  const months = [
    'Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho',
    'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'
  ];
  
  let title = '';
  if (currentView === 'month') {
    title = months[currentDate.getMonth()] + ' ' + currentDate.getFullYear();
  } else if (currentView === 'week') {
    const startOfWeek = new Date(currentDate);
    startOfWeek.setDate(currentDate.getDate() - currentDate.getDay());
    const endOfWeek = new Date(startOfWeek);
    endOfWeek.setDate(startOfWeek.getDate() + 6);
    
    title = startOfWeek.getDate() + '/' + (startOfWeek.getMonth() + 1) + 
            ' - ' + endOfWeek.getDate() + '/' + (endOfWeek.getMonth() + 1) + 
            '/' + endOfWeek.getFullYear();
  } else {
    title = 'Lista de Eventos';
  }
  
  document.getElementById('calendar-title').textContent = title;
}

function renderMonthView() {
  const grid = document.getElementById('calendar-grid');
  grid.innerHTML = '';
  
  const firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
  const lastDay = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
  const startDate = new Date(firstDay);
  startDate.setDate(startDate.getDate() - firstDay.getDay());
  
  const showPastEvents = document.getElementById('showPastEvents').checked;
  const eventTypeFilter = document.getElementById('eventTypeFilter').value;
  
  for (let i = 0; i < 42; i++) { // 6 semanas x 7 dias
    const cellDate = new Date(startDate);
    cellDate.setDate(startDate.getDate() + i);
    
    const dayCell = document.createElement('div');
    dayCell.className = 'calendar-day';
    
    if (cellDate.getMonth() !== currentDate.getMonth()) {
      dayCell.classList.add('other-month');
    }
    
    if (cellDate.toDateString() === new Date().toDateString()) {
      dayCell.classList.add('today');
    }
    
    dayCell.innerHTML = `<div class="day-number">${cellDate.getDate()}</div>`;
    
    // Adicionar eventos do dia
    const dayEvents = getEventsForDate(cellDate, showPastEvents, eventTypeFilter);
    dayEvents.forEach(event => {
      const eventElement = document.createElement('div');
      eventElement.className = `calendar-event bg-${getEventColor(event.event_type)}`;
      eventElement.textContent = event.title;
      eventElement.onclick = () => showEventModal(event);
      dayCell.appendChild(eventElement);
    });
    
    grid.appendChild(dayCell);
  }
}

function renderWeekView() {
  const grid = document.getElementById('week-grid');
  grid.innerHTML = '';
  
  // Gerar horários de 7:00 às 19:00
  for (let hour = 7; hour <= 19; hour++) {
    const row = document.createElement('tr');
    row.innerHTML = `<td class="time-slot">${hour}:00</td>`;
    
    // Adicionar células para cada dia da semana
    for (let day = 0; day < 7; day++) {
      const cell = document.createElement('td');
      cell.className = 'week-day-cell';
      row.appendChild(cell);
    }
    
    grid.appendChild(row);
  }
}

function renderListView() {
  const container = document.getElementById('events-list');
  container.innerHTML = '';
  
  const showPastEvents = document.getElementById('showPastEvents').checked;
  const eventTypeFilter = document.getElementById('eventTypeFilter').value;
  
  let filteredEvents = events.filter(event => {
    const eventDate = new Date(event.start_date);
    const today = new Date();
    
    if (!showPastEvents && eventDate < today) {
      return false;
    }
    
    if (eventTypeFilter && event.event_type !== eventTypeFilter) {
      return false;
    }
    
    return true;
  });
  
  // Ordenar por data
  filteredEvents.sort((a, b) => new Date(a.start_date) - new Date(b.start_date));
  
  if (filteredEvents.length === 0) {
    container.innerHTML = `
      <div class="col-12">
        <div class="card">
          <div class="card-body text-center py-5">
            <i class="fas fa-calendar fa-3x text-muted mb-3"></i>
            <h5 class="text-muted">Nenhum evento encontrado</h5>
          </div>
        </div>
      </div>
    `;
    return;
  }
  
  filteredEvents.forEach(event => {
    const eventCard = document.createElement('div');
    eventCard.className = 'col-md-6 col-lg-4 mb-3';
    
    const eventDate = new Date(event.start_date);
    const isToday = eventDate.toDateString() === new Date().toDateString();
    
    eventCard.innerHTML = `
      <div class="card h-100 ${isToday ? 'border-warning' : ''}">
        <div class="card-body">
          <div class="d-flex justify-content-between align-items-start mb-2">
            <h6 class="card-title mb-0">${event.title}</h6>
            <span class="badge bg-${getEventColor(event.event_type)}">
              ${event.event_type ? event.event_type.replace(/^\w/, c => c.toUpperCase()) : 'Geral'}
            </span>
          </div>
          <p class="text-muted small mb-2">
            ${event.description ? event.description.substring(0, 100) + '...' : ''}
          </p>
          <div class="small">
            <i class="fas fa-calendar text-primary"></i>
            ${formatDate(event.start_date)}
            ${event.start_time ? 'às ' + event.start_time : ''}
          </div>
          ${event.location ? `
            <div class="small mt-1">
              <i class="fas fa-map-marker-alt text-danger"></i>
              ${event.location}
            </div>
          ` : ''}
        </div>
        <div class="card-footer">
          <button class="btn btn-sm btn-outline-primary" onclick="showEventModal(${JSON.stringify(event).replace(/"/g, '&quot;')})">
            Ver detalhes
          </button>
        </div>
      </div>
    `;
    
    container.appendChild(eventCard);
  });
}

function getEventsForDate(date, showPastEvents, eventTypeFilter) {
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  date.setHours(0, 0, 0, 0);
  
  return events.filter(event => {
    const eventStart = new Date(event.start_date);
    const eventEnd = new Date(event.end_date || event.start_date);
    eventStart.setHours(0, 0, 0, 0);
    eventEnd.setHours(0, 0, 0, 0);
    
    // Verificar se a data está no range do evento
    if (date < eventStart || date > eventEnd) {
      return false;
    }
    
    // Filtrar eventos passados se necessário
    if (!showPastEvents && eventEnd < today) {
      return false;
    }
    
    // Filtrar por tipo se especificado
    if (eventTypeFilter && event.event_type !== eventTypeFilter) {
      return false;
    }
    
    return true;
  });
}

function getEventColor(eventType) {
  const colors = {
    'academic': 'primary',
    'cultural': 'success',
    'sports': 'warning',
    'meeting': 'info',
    'holiday': 'danger'
  };
  return colors[eventType] || 'secondary';
}

function formatDate(dateString) {
  const date = new Date(dateString);
  return date.toLocaleDateString('pt-BR');
}

function showEventModal(event) {
  document.getElementById('eventModalTitle').textContent = event.title;
  
  const modalBody = document.getElementById('eventModalBody');
  modalBody.innerHTML = `
    <div class="mb-3">
      <strong>Descrição:</strong>
      <p class="mt-1">${event.description || 'Sem descrição disponível'}</p>
    </div>
    
    <div class="row mb-3">
      <div class="col-6">
        <strong>Data de início:</strong>
        <p class="mt-1">${formatDate(event.start_date)}${event.start_time ? ' às ' + event.start_time : ''}</p>
      </div>
      <div class="col-6">
        <strong>Data de término:</strong>
        <p class="mt-1">${formatDate(event.end_date || event.start_date)}${event.end_time ? ' às ' + event.end_time : ''}</p>
      </div>
    </div>
    
    ${event.location ? `
      <div class="mb-3">
        <strong>Local:</strong>
        <p class="mt-1"><i class="fas fa-map-marker-alt text-danger"></i> ${event.location}</p>
      </div>
    ` : ''}
    
    <div class="mb-3">
      <strong>Tipo:</strong>
      <span class="badge bg-${getEventColor(event.event_type)} ms-2">
        ${event.event_type ? event.event_type.replace(/^\w/, c => c.toUpperCase()) : 'Geral'}
      </span>
    </div>
    
    <div class="mb-3">
      <strong>Criado por:</strong>
      <p class="mt-1">${event.created_by}</p>
    </div>
  `;
  
  document.getElementById('addToCalendarBtn').onclick = () => addToCalendar(event);
  
  new bootstrap.Modal(document.getElementById('eventModal')).show();
}

function addToCalendar(event) {
  // Implementar funcionalidade para adicionar ao calendário
  alert(`Adicionar "${event.title}" ao calendário em ${formatDate(event.start_date)}`);
}
</script>

<style>
.calendar-grid {
  display: flex;
  flex-direction: column;
}

.calendar-header {
  display: grid;
  grid-template-columns: repeat(7, 1fr);
  background-color: #f8f9fa;
  border-bottom: 1px solid #dee2e6;
}

.calendar-day-header {
  padding: 0.75rem;
  text-align: center;
  font-weight: 600;
  border-right: 1px solid #dee2e6;
}

.calendar-day-header:last-child {
  border-right: none;
}

.calendar-body {
  display: grid;
  grid-template-columns: repeat(7, 1fr);
  grid-template-rows: repeat(6, 1fr);
}

.calendar-day {
  min-height: 120px;
  padding: 0.5rem;
  border-right: 1px solid #dee2e6;
  border-bottom: 1px solid #dee2e6;
  position: relative;
}

.calendar-day:nth-child(7n) {
  border-right: none;
}

.calendar-day.other-month {
  background-color: #f8f9fa;
  color: #6c757d;
}

.calendar-day.today {
  background-color: #fff3cd;
}

.day-number {
  font-weight: 600;
  margin-bottom: 0.25rem;
}

.calendar-event {
  font-size: 0.75rem;
  padding: 0.125rem 0.25rem;
  margin-bottom: 0.125rem;
  border-radius: 0.25rem;
  cursor: pointer;
  color: white;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.calendar-event:hover {
  opacity: 0.8;
}

.time-slot {
  background-color: #f8f9fa;
  text-align: center;
  font-weight: 600;
  width: 100px;
}

.week-day-cell {
  height: 60px;
  vertical-align: top;
  border: 1px solid #dee2e6;
}
</style>
